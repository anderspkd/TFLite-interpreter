#+TITLE: TFLite Interpreter

A small program for loading a ~.tflite~ file and inspecting it in a
programmatic way using python. See ~model.py~ for a better
explanation.

The files in the ~tflite~ directory were generated by Google's ~flatc~ program using the schema from the Tensorflow repo. [[https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/schema/schema.fbs][Link.]]

The ~data~ directory contains some tflite models an some test images that can be used to test the parser.
Currently, the most stable version of the interpreter is ~interpreter_v3.py~. One example of how to use it is

: $ python interpreter_v3.py "data/mobilenet_v1_0.25_128_quant.tflite" "data/impala.jpg" "data/imagenet_labels.txt"

which should print all the operators of the network, the final top 5 categories and the most likely label for the given image.

Tensorflow's interpreter can be used to test the validity of the results:

: $ python tflite_interpreter.py "data/mobilenet_v1_0.25_128_quant.tflite" "data/impala.jpg" "data/imagenet_labels.txt"

** Code structure

   There's three classes:

   - Tensor (defined in ~model.py~) is a thin-ish wrapper around a numpy data
     array. The idea is to have a array-like object which also keeps track of
     the quantization parameters for a particular tensor.

   - TFLiteModel (defined in ~model.py~) a wrapper around a ~.tflite~ model
     file. It's instantiated with a ~.tflite~ model file which it loads and
     converts into a representation that is easier to work with in Python. After
     loading a model, this object can be used as a interator. See usage on lines
     40, 41, 42 and 69 in ~interpreter_v3.py~.

   - Operator (defined in ~model.py~) and anything subclassed from it. Each kind
     of operator (i.e., layer in the network) gets its own operator. E.g., a 2D
     convolution is a type of operator. The corresponding operator class is
     essentially a container for various metadata surrounding the operator. In
     the case of convolution, this data could be the stride or what kind of
     padding is used. This object does perform any kind of computation in the
     network.


   There's three versions of the operators needed for the MobileNetsV1 networks
   implemented: reference, dequantized and sop. Operators are implemented in
   ~<variant>_operators.py~.

   - reference: This is a more-or-less straight copy of how the various
     operators are implemented in tensorflow. This means a lot of nested
     for-loops and thus these are pretty slow when run in python.

   - dequantized: Same as above, except all tensors are dequantized before
     evaluation (e.g., converted from uint8 back to float32).

   - sop: here the task of manipulatng the input into a matrix like shape and
     then performing the actual computation, is split. It is slightly faster
     than the reference implementation described above, mostly because there's
     fewer nested loops.

** Usage

   The parser requires Google's [[https://google.github.io/flatbuffers/][flatbuffer]] library. Installation
   instructions can be found [[https://google.github.io/flatbuffers/flatbuffers_guide_building.html][here]] (you may need to change
   ~-Werror=implicit-fallthrough=2~ by
   ~-Werror=implicit-fallthrough=0~ in ~CMakeLists.txt~ if you get a
   fallthrough error during installation). After installation, it's
   just a matter of installing the Python library (e.g. ~pip install
   flatbuffers~, or if you use conda then ~conda install -c
   conda-forge python-flatbuffers~).
   
** Supported models

   We've only tested it with a Mobile Nets V1 model. Specifically the
   one called ~Mobilenet_V1_0.25_128_quant~ located [[https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/g3doc/models.md#image-classification-quantized-models][here.]]
   The interpreter should work with V2 of Mobile Nets as well, but currently the implementation of the ADD operator is missing.

   It should be fairly easy to add support for parsing more different
   operations. See the comments in ~model.py~.

** What's missing
   - Implementing the intepreter for the Add operation
   - Testing with different models.
